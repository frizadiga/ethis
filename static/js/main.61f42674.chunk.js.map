{"version":3,"sources":["lib/Fetch.js","components/home-page/index.js","components/home-page/home-page.js","components/login-page/index.js","components/login-page/login-page.js","components/app/index.js","components/app/app.js","service-worker/service-worker.js","index.js"],"names":["Fetch","axios","create","baseURL","HomePage","_useState","useState","_useState2","Object","slicedToArray","data","setData","fetchData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","sent","console","log","status","stop","this","apply","arguments","useEffect","react_default","createElement","className","map","item","key","id","Fragment","title","content","user","LoginPage","props","history","facebook_login_with_button_default","appId","autoLoad","fields","onClick","callback","localStorage","isLogin","push","App","window","location","pathname","JSON","parse","assign","BrowserRouter","Switch","Route","path","component","exact","Boolean","hostname","match","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61f42674.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst options = {\r\n  baseURL: 'http://167.99.74.58:1337',\r\n};\r\n\r\nconst Fetch = axios.create(options);\r\n\r\nexport default Fetch;","import HomePage from './home-page';\r\n\r\nexport default HomePage;","import React, { useState, useEffect } from 'react';\r\nimport './home-page.scss';\r\nimport Fetch from '../../lib/Fetch';\r\n\r\nconst HomePage = () => {\r\n  const [ data, setData ] = useState([]);\r\n\r\n  const fetchData = async () => {\r\n    const response = await Fetch('/blogposts')\r\n    console.log(response)\r\n    if (response.status === 200) setData(response.data)\r\n  }\r\n\r\n  useEffect(() => { fetchData() }, []);\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      HomePage\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Title</th>\r\n            <th>Content</th>\r\n            <th>User</th>\r\n          </tr>\r\n          </thead>\r\n        <tbody>\r\n          {data.map((item) => (\r\n            <tr key={item.id}> \r\n            {\r\n              <React.Fragment>\r\n                <td>{item.id || '-'}</td>\r\n                <td>{item.title || '-'}</td>\r\n                <td>{item.content || '-'}</td>\r\n                <td>{item.user || '-'}</td>\r\n              </React.Fragment>\r\n            }\r\n            </tr>))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;","import LoginPage from './login-page';\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport './login-page.scss';\r\nimport FacebookLogin from 'react-facebook-login';\r\n\r\nconst LoginPage = (props) => {\r\n  const { history } = props;\r\n\r\n  const responseFacebook = (response) => {\r\n    localStorage.isLogin = 'true'\r\n    console.log(response);\r\n    history.push('/');\r\n  }\r\n\r\n  const fnSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log('fnSubmit')\r\n  }\r\n\r\n  const ButtonLogin = () => {\r\n    return (\r\n      <button>Login</button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      LoginPage\r\n      <div className=\"login-page__form\">\r\n\r\n        <FacebookLogin\r\n          appId=\"323230384960442\"\r\n          autoLoad={true}\r\n          fields=\"name,email,picture\"\r\n          onClick={ButtonLogin}\r\n          callback={responseFacebook} \r\n        />\r\n      \r\n        { false && \r\n          <form onSubmit={fnSubmit}>\r\n            <input type=\"email\" placeholder=\"Email\" />\r\n            <input type=\"password\" placeholder=\"Password\" />\r\n          </form> \r\n        }\r\n      \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;","import App from './app';\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './app.scss';\n\n// Components\nimport HomePage from '../home-page';\nimport LoginPage from '../login-page';\nimport BottomBar from '../bottom-bar';\n\nconst App = () => {\n  const [ loading, setLoading ] = useState(true);\n  \n  // setTimeout(() => setLoading(false), 0);\n  // if (loading) return null;\n\n  const fnCheckAuth = () => {\n    console.log('fnCheckAuth');\n    const pathname = window.location.pathname;\n    if (pathname === '/login') return\n\n    const isLogin = JSON.parse(localStorage.isLogin) || false;\n    if (!isLogin) window.location.assign('/login');\n  }\n\n  useEffect(() => { fnCheckAuth() }, [])\n  \n  return (\n    <React.Fragment>\n      <main className=\"app\">\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact/>\n              <Route path=\"/login\" component={LoginPage} exact/>\n            </Switch>\n            { false && <BottomBar /> }\n          </div>\n        </Router>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}